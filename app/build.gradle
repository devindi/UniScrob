buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def fabricApiKey = properties.getProperty("fabric.api", "")

apply plugin: 'com.android.application'
apply plugin: 'git-helper'
apply plugin: 'realm-android'
if (fabricApiKey.isEmpty()) {
    println("Crashlitics disabled. Provide API key at local.properties")
} else {
    apply plugin: 'io.fabric'
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.devindi.android.uniscrob"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [FABRIC_API_KEY: fabricApiKey]
    }
    signingConfigs {
        //I wouldn't override default debug config
        debugg {
            storeFile project.rootProject.file("debug.jks")
            storePassword '123123'
            keyAlias 'debug'
            keyPassword '123123'
        }
    }
    if (project.file('signing.gradle').exists()) {
        apply from: 'signing.gradle', to: android
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (signingConfigs.properties.get('names').collect().contains('release')) {
                signingConfig signingConfigs.release
                println 'Using \'release\' signing config for release build'
            } else {
                println 'Using default signing config for release build'
            }
        }
        debug {
            signingConfig signingConfigs.debugg
        }
    }
}

dependencies {

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    testCompile 'junit:junit:4.12'
    compile 'com.jakewharton.timber:timber:4.5.1'
    compile "com.google.dagger:dagger:2.9"
    annotationProcessor "com.google.dagger:dagger-compiler:2.9"
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.android.support:recyclerview-v7:25.1.0'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
        transitive = true;
    }
    compile 'com.android.support.constraint:constraint-layout:1.0.0'
}
